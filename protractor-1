describe('Test set', function() {  // zestaw testowy

    function Calc (a,b,c)
        {                                       //określam metodę Add z 3 zmiennymi i jak je użyć. Czy jak wywołam Add - wystarczy dodać dane
      element(by.model('first')).sendKeys(a);
      element(by.model('second')).sendKeys(b);


  
      //Wciąganie znaku działania, aby usprawnic kod

       element.all(by.tagName('option')).each(function(item) 
        {
        item.getAttribute("value").then(function(values)
        {
         if(values == c) 
         {
         item.click();   
         }  
         })
        }) 
      element(by.id("gobutton")).click();
    }
    



    it('1st test case', () => { // przypadek testowy


      //const EC = protractor.ExpectedContitions;
      
      browser.get('http://juliemr.github.io/protractor-demo/')
      element(by.model('first')).sendKeys('2')
      element(by.model('second')).sendKeys('8')
       element(by.model('operator')).element(by.css("option:nth-child(4)")).click() // Sterowanie selectami: option==td. szukanie po dzieciach zaczynamy od taga (td,tr,h2,option itp itd)
       element(by.id("gobutton")).click() 
       element(by.repeater("result in memory")).element(by.css("td:nth-child(3)")).getText().then(function(text)  // repeater==chain locator. Szukanie po repeaterze to szukanie po bloku jednego konkretnego lancucha
       {  // @up Wyszukuję najpierw chaina, następnie po child locatorach.
          // Child: 1, 2, 3
       console.log(text);
       })

         Calc (2,8,"ADDITION");
         Calc (12,6,"DIVISION");
         Calc (12,8,"DIVISION");
         Calc (10,2,"MULTIPLICATION");
         Calc (10,2,"ADDITION");
         Calc (10,2,"SUBTRACTION");

         element.all(by.tagName('option')).each(function(item)  //Pobieram pozycję wartości w selekcie
         {
         item.getAttribute("value").then(function(values) //Pobieram wartości
          {
            console.log(values);
           })

        })

       //Grab i weryfikacja pionowo:
       element.all(by.repeater("result in memory")).count().then(function(text) //zliczanie wyników
       { 
       console.log(text);
       })
       element.all(by.repeater("result in memory")).each(function(item) //Sciagamy kazdy rezultat z konkretnego childa
       {
        item.element(by.css("td:nth-child(3)")).getText().then(function(text) // z ktorej kolumny
        {
          console.log(text);   
        })

       })
      // expect(element(by.css("h2[class='ng-binding']")).getText()).toBe("4")  // expect(element który chcemy sprawdzić).toBe(wartość której się spodziewamy)

      

      

       
    

     // .then(() => element(by.binding('ng-binding')))
      //.then(() => browser.wait(EC.presenceOf(('ng-binding')), 5000));
    });



  });
