//Class Features
Feature: Portal Login
 Background:
 Given background steps

  @happypath
  Scenario: Poprawne logowanie
    Given User is on landing page
    When User login into application with correct login and correct password
    Then Home page is visible
    And Chrome is closed

  @UnhappyPath
  Scenario: Niepoprawne logowanie
    Given User is on landing page
    When User login into application with incorrect login and incorrect password
    Then  Home page is not visible
    And Chrome is closed

    @new
    Scenario: Poprawne logowanie
      Given User is on landing page
      When User login into application with login "tomsmith" and password "SuperSecretPassword!"
      Then Home page is visible
      And Chrome is closed

      @bad
      Scenario: Niepoprawne logowanie
        Given User is on landing page
        When User login into application with login "Jankowalski" and password "Cojestkuwa123!"
        Then  Home page is not visible
        And Chrome is closed
   @pusty
   Scenario: Niepoprawne logowanie z pustymi polami
     Given User is on landing page
     When User login into application with login "" and password ""
     Then  Home page is not visible
     And Chrome is closed

  @parametrization
  Scenario Outline: Niepoprawne logowanie
    Given User is on landing page
    When User login into application with <login> login and <password> password
    Then  Home page is not visible
    And Chrome is closed

    Examples:
    |login      |password            |
    |maciej     |janeczko            |
    |tomsmith   |SuperSecretPassworf!|
    |JanKowalski|Cojestawruk123      |
    
    
    //Class - Steps
    package StepDefinitions;


import cucumber.api.java.en.Given;
import cucumber.api.java.en.When;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.And;
import org.junit.Assert;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class AccountBasicSteps {

    private ChromeDriver driver;

    @Given("^background steps$")
    public void background_steps() {
        System.out.println("Test behawioralny logowania do strony internetowej\n");
    }


    @Given("^User is on landing page$")
    public void user_is_on_landing_page() {
        System.setProperty("webdriver.chrome.driver", "C:\\Users\\Miko≈Çaj\\Downloads\\SDA\\chromedriver.exe");
        driver = new ChromeDriver();
        driver.get("http://the-internet.herokuapp.com/login");
    }

    @When("^User login into application with correct login and correct password$")
    public void User_login_into_application_with_correct_login_and_correct_password() {
        WebElement elementUserName = driver.findElementById("username");
        elementUserName.sendKeys("tomsmith");
        WebElement elementPassword = driver.findElementById("password");
        elementPassword.sendKeys("SuperSecretPassword!");
        WebElement elementLoginButton = driver.findElementByClassName("radius");
        elementLoginButton.click();

    }

    @Then("^Home page is visible$")
    public void Home_page_is_visible() {
        Assert.assertEquals("http://the-internet.herokuapp.com/secure", driver.getCurrentUrl());
    }

    @And("^Chrome is closed$")
    public void Chrome_is_closed() {
        driver.close();
    }

    @When("^User login into application with incorrect login and incorrect password$")
    public void user_login_into_application_with_incorrect_login_and_incorrect_password() {
        WebElement elementUserName = driver.findElementById("username");
        elementUserName.sendKeys("jankowalski1");
        WebElement elementPassword = driver.findElementById("password");
        elementPassword.sendKeys("SuperSecretPassword!");
        WebElement elementLoginButton = driver.findElementByClassName("radius");
        elementLoginButton.click();

    }

    @Then("^Home page is not visible$")
    public void Home_page_is_not_visible() {
        Assert.assertEquals("http://the-internet.herokuapp.com/login",
                driver.getCurrentUrl());

    }
    @When("^User login into application with login \"([^\"]*)\" and password \"([^\"]*)\"$")
    public void user_login_into_application_with_login_something_and_password_something(String login, String password) {
        WebElement elementUserName = driver.findElementById("username");
        elementUserName.sendKeys(login);
        WebElement elementPassword = driver.findElementById("password");
        elementPassword.sendKeys(password);
        WebElement elementLoginButton = driver.findElementByClassName("radius");
        elementLoginButton.click();
    }
    // class - Hooks:
    
    package StepDefinitions;

import cucumber.api.java.After;
import cucumber.api.java.Before;

public class Hooks {
    @Before("@hook1")
    public void aletoniedomnietakdomnienie(){
        System.out.println("aaaaaaaaaaa przed scenariuszem testowym");
    }
    @After("@hook1")
    public void cokolwiektuwpisze() {
        System.out.println("After po scenariuszu testowym");

    }



}
//Class - Hooksteps
package StepDefinitions;

import cucumber.api.java.en.*;

public class hooksteps {

    @Given("^kroki background$")
    public void kroki_background() {
        System.out.println("matrix is real\n");
    }

        @Given("^Uzytkownik ma uruchomiona przegladarke$")
        public void uzytkownik_ma_uruchomiona_przegladarke(){
            System.out.println("Zostal wykonany krok 1 ze scenariusza");
            System.out.println("Uzytkownik ma uruchomiona przegladarke\n");
        }
    @When("^Wpisuje adres strony internetowej$")
    public void wpisuje_adres_strony_internetowej() {
        System.out.println("Zostal wykonany krok 2 ze scenariusza");
        System.out.println("Wpisuje adres strony internetowej\n");
        }

    @Then("^W przegladarce znajduje sie wlasciwy adres$")
    public void w_przegladarce_znajduje_sie_wlasciwy_adres(){
        System.out.println("Zostal wykonany krok 3 ze scenariusza");
        System.out.println("W przegladarce znajduje sie wlasciwy adres\n");
        }
    @And("^wyswietlona jest wlasciwa strona$")
    public void wyswietlona_jest_wlasciwa_strona(){
        System.out.println("Zostal wykonany krok 4 ze scenariusza");
        System.out.println("wyswietlona jest wlasciwa strona\n");
        }
    @But("^nie jest to strona wp$")
    public void nie_jest_to_strona_wp() {
        System.out.println("Zostal wykonany krok 4 ze scenariusza");
        System.out.println("nie jest to strona wp\n");
        }

}
